{"version":3,"sources":["components/UI/Button.jsx","components/Interface.jsx","components/Screen.jsx","components/CalcHistory.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","clicked","type","className","Interface","map","row","i","key","char","clickButton","Screen","screenValue","CalcHistory","history","math","create","all","App","useState","value","setValue","setHistory","length","prevValue","evaluate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAYeA,EAVA,SAAAC,GACX,OACI,4BACIC,QAAS,kBAAMD,EAAME,QAAQF,EAAMG,OACnCC,UAA0B,IAAfJ,EAAMG,MAA6B,MAAfH,EAAMG,MAA+B,MAAfH,EAAMG,KAAe,OAAwB,MAAfH,EAAMG,KAAe,SAAW,IAClHH,EAAMG,OCqBJE,EAxBG,SAAAL,GAId,OACI,yBAAKI,UAAU,aAHN,CAAC,CAAC,IAAK,KAAM,CAAC,EAAG,EAAG,EAAG,KAAM,CAAC,EAAG,EAAG,EAAG,KAAM,CAAC,EAAG,EAAG,EAAG,KAAM,CAAC,EAAG,IAAK,MAIrEE,KAAI,SAACC,EAAKC,GAAN,OACN,yBACIC,IAAKD,EAAI,EACTJ,UAAU,OAETG,EAAID,KAAI,SAAAI,GAAI,OACT,kBAAC,EAAD,CACID,IAAKC,EACLP,KAAMO,EACNR,QAASF,EAAMW,uBCT5BC,EARA,SAAAZ,GACX,OACI,yBAAKI,UAAU,UACVJ,EAAMa,cCKJC,EARK,SAAAd,GAChB,OACI,yBAAKI,UAAU,gBACVJ,EAAMe,UCIbC,EAAOC,YAAOC,IADL,IA0DAC,MAvDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNL,EAHM,KAGGQ,EAHH,KA2Cb,OACE,yBAAKnB,UAAU,OACb,8BACE,kBAAC,EAAD,CAAaW,QAASA,IACtB,6BACA,kBAAC,EAAD,CAAQF,YAAaQ,IACrB,kBAAC,EAAD,CAAWV,YA5CY,SAAAR,GAC3B,GAAIkB,EAAMG,OAAS,GAAKT,EAAQS,OAAS,GACvC,OAAQrB,GACN,IAAK,IACHmB,EAAS,IACTC,EAAW,IACX,MACF,IAAK,IAIL,IAAK,IACHD,EAAS,IACTC,GAAW,SAAAE,GAAS,OAAIA,EAAYtB,KACpC,MACF,IAAK,IACHmB,EAAS,IACTC,GAAW,SAAAE,GAAS,OAAIA,EAAY,OACpC,MACF,IAAK,IACHH,EAAS,IACTC,GAAW,SAAAE,GAAS,OAAIA,EAAYtB,KACpC,MACF,IAAK,IACHmB,GAAS,SAAAG,GAAS,OAAIA,EAAYtB,KAClCoB,GAAW,SAAAE,GAAS,OAAIA,EAAYtB,KACpC,MACF,IAAK,IACHmB,EAASN,EAAKU,SAASX,IACvB,MACF,QACEO,GAAS,SAAAG,GAAS,OAAIA,EAAYtB,KAClCoB,GAAW,SAAAE,GAAS,OAAIA,EAAYtB,YCpC1BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d163b376.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <button \r\n            onClick={() => props.clicked(props.type)}            \r\n            className={props.type === 0 || props.type === 'C' || props.type === '/' ? 'zero' : props.type === '=' ? 'bg-red' : ''} >\r\n            {props.type}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport Button from './UI/Button'\r\n\r\nconst Interface = props => {\r\n\r\n    const rows = [['C', '/'], [7, 8, 9, 'x'], [4, 5, 6, '-'], [1, 2, 3, '+'], [0, '.', '=']]\r\n\r\n    return (\r\n        <div className='interface'>\r\n            {rows.map((row, i) =>\r\n                <div\r\n                    key={i + 1}\r\n                    className='row'\r\n                >\r\n                    {row.map(char =>\r\n                        <Button\r\n                            key={char}\r\n                            type={char}\r\n                            clicked={props.clickButton} \r\n                        />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Interface;","import React from 'react';\r\n\r\nconst Screen = props => {\r\n    return (\r\n        <div className='screen'>\r\n            {props.screenValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen;","import React from 'react';\r\n\r\nconst CalcHistory = props => {\r\n    return (\r\n        <div className='calc-history'>\r\n            {props.history}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalcHistory;","import React, { useState } from 'react';\nimport { create, all } from 'mathjs'\n\nimport Interface from './components/Interface';\nimport Screen from './components/Screen';\nimport CalcHistory from './components/CalcHistory';\n\n\nconst config = {}\nconst math = create(all, config)\n\nfunction App() {\n\n  const [value, setValue] = useState('')\n  const [history, setHistory] = useState('')\n\n  const buttonClickedHandler = type => {\n    if (value.length < 9 || history.length < 21) {\n      switch (type) {\n        case 'C':\n          setValue('')\n          setHistory('')\n          break;\n        case '+':\n          setValue('')\n          setHistory(prevValue => prevValue + type)\n          break;\n        case '-':\n          setValue('')\n          setHistory(prevValue => prevValue + type)\n          break;\n        case 'x':\n          setValue('')\n          setHistory(prevValue => prevValue + '*')\n          break;\n        case '/':\n          setValue('')\n          setHistory(prevValue => prevValue + type)\n          break;\n        case '.':\n          setValue(prevValue => prevValue + type)\n          setHistory(prevValue => prevValue + type)\n          break;\n        case '=':\n          setValue(math.evaluate(history))\n          break;\n        default:\n          setValue(prevValue => prevValue + type)\n          setHistory(prevValue => prevValue + type)\n          break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        <CalcHistory history={history} />\n        <hr />\n        <Screen screenValue={value} />\n        <Interface clickButton={buttonClickedHandler} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}